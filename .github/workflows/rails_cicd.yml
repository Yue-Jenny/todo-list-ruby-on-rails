name: Rails CICD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint_and_test:
    runs-on: ubuntu-latest
    
    # See https://docs.github.com/en/actions/using-containerized-services/creating-postgresql-service-containers
    services:
      postgres:
        image: postgres:16.0-alpine3.18 # 根據你的需求調整 postgres image 版本
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: mysecretpassword
          POSTGRES_DB: todo_test
        ports:
        - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - name: Check out code
      uses: actions/checkout@v3

    # See https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-ruby#caching-dependencies
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 3.2.2 # 根據你的需求調整 Ruby 版本
        bundler-cache: true

    # 執行 Rubocop 確認 coding style 
    - name: Rubocop Linting
      run: bundle exec rubocop

    - name: Setup Database
      env:
        RAILS_ENV: test
        YOUR_PROJECT_NAME_WITH_PG_DATABASE_PASSWORD: mysecretpassword
        TEST_DATABASE: todo_test
        TEST_DATABASE_HOST: localhost
        TEST_DATABASE_PORT: 5432
      run: |
        bundle exec rails db:setup

    - name: Run Tests
      env:
        RAILS_ENV: test
        YOUR_PROJECT_NAME_WITH_PG_DATABASE_PASSWORD: mysecretpassword
        TEST_DATABASE: todo_test
        TEST_DATABASE_HOST: localhost
        TEST_DATABASE_PORT: 5432
      run: rake spec

  build_and_push:
    needs: lint_and_test # 這表示這個 job 會在 lint_and_test 完成後執行
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v3

    # Add support for more platforms with QEMU (optional)
    # https://github.com/docker/setup-qemu-action
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

    # see: https://github.com/orgs/community/discussions/27086
    # see: https://github.com/orgs/community/discussions/25768
    - name: downcase REPO name
      run: |
        echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}

    # see: https://stackoverflow.com/questions/59810838/how-to-get-the-short-sha-for-the-github-workflow
    # see: https://stackoverflow.com/questions/18134627/how-much-of-a-git-sha-is-generally-considered-necessary-to-uniquely-identify-a
    - name: Set short sha outputs
      id: vars
      run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    - name: Check short sha outputs
      run: echo ${{ steps.vars.outputs.sha_short }}

    # tags pattern should be <registry>/<account>/<repo>:<tag>
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        platforms: linux/amd64
        file: ./Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.REPO }}:${{ steps.vars.outputs.sha_short }}
        labels: ${{ steps.meta.outputs.labels }}